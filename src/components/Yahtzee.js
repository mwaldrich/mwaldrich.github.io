/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 dice-blendswap.glb --transform
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useSpring, a } from '@react-spring/three'
import { useFrame } from '@react-three/fiber';

export default function Yahtzee(props) {
  const { nodes, materials } = useGLTF('/dice-blendswap-transformed.glb')

  const ref = React.useRef();

  useFrame((state) => {
    const t = state.clock.getElapsedTime()

    ref.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) 
    ref.current.rotation.x = Math.cos(t / 4) / 8
    ref.current.rotation.y = Math.sin(t / 4) / 8
    ref.current.rotation.y = (1 + Math.sin(t / 1.5))
  })

  console.log(ref)

  return (
    <group 
      {...props} 
      ref={ref}
      dispose={null}
      scale={[0.08, 0.08, 0.08]}
      position={[-0.8, 1.30, -0.30]}
      rotation={[0.5, 0.5, 0.5]}
      onPointerEnter={() => ref.current.children[0].material.color.set(0xffff00)}
      onPointerLeave={() => ref.current.children[0].material.color.set(0xffffff)}
      onPointerDown={() => {window.open("https://mwaldrich.io/yahtzee/", '_blank');}}
      //{...spring}
      >
      <mesh geometry={nodes.dice_1.geometry} material={materials.dice} />
      <mesh geometry={nodes.dice_2.geometry} material={materials.dots} />
    </group>
  )
}

useGLTF.preload('/dice-blendswap-transformed.glb')
